:orphan:

=============
Robocop 4.0.0
=============

Description.

You can install the latest available version by running

::

    pip install --upgrade robotframework-robocop

or to install exactly this version

::

    pip install robotframework-robocop==4.0.0

.. contents::
   :depth: 2
   :local:


Rule changes
============

New rule for detecting not supported settings in resource files (#827)
----------------------------------------------------------------------

According to the official RF User Guide::

    "Setting section in resource files can contain only import settings (Library, Resource, Variables)
    and Documentation. The Variable section and Keyword section are used exactly the same way
    as in test case files."

New E0416 ``invalid-setting-in-resource`` rule detects unsupported
settings in resource files.

New rule that suggests using task- or test-related settings for corresponding sections (#522)
---------------------------------------------------------------------------------------------

If the file contains ``*** Task ***`` section, it is recommended to use settings like ``Task Setup``,
``Task Teardown``, ``Task Template``, ``Task Tags`` and ``Task Timeout`` instead of their `Test` variants.
Similarly, use test-related settings when using ``*** Test Cases ***`` section.

A new rule W0326 ``mixed-task-test-settings`` is introduced to cover these cases.

New rules for Keyword Tags (#641)
---------------------------------

There are 3 new rules added to support new (in RF 6.0) Keyword Tags.

``empty-keyword-tags`` rule (W0531) checks for the situation where ``Keyword Tags`` in `*** Settings ***` section
does not have any value provided::

    *** Settings ***
    Keyword Tags

``could-be-keyword-tags`` rule (I0610) checks if all keywords in a file share the same tag. In that case, it can be
simply added to ``Keyword Tags`` setting, which the rule suggests.

``tag-already-set-in-keyword-tags`` rule (I0611) detects a situation where all keywords share the same tag
which is already added to the ``Keyword Tags`` setting. In such case, the tags in keywords may be removed.

New rule for discovering unsupported setting in initialization file (#498)
--------------------------------------------------------------------------

According to RF User Guide, ``Default Tags`` and ``Test Template`` settings are not allowed
in suite initialization files, and this is covered by new ``unsupported-setting-in-init-file``
rule (E0417).


Other features
==============

Overhaul of rules & checkers importing (#790)
---------------------------------------------

Complete refactor of how Robocop imports rules and checkers internally. Our import mechanism is now more uniform.
Additionally, it is now possible to load external rules from the modules imported inside Python file.

Let's assume we have the following code with loading external rules::

    import custom_rules.naming
    import custom_rules.errors
    from custom_rules.lengths import rules, CustomChecker

before the change, only ``CustomChecker`` would be loaded by Robocop, while the content of the ``custom_rules.naming`` and
``custom_rules.errors`` would be ignored. Now such imports will be parsed and external Robocop rules defined
inside them will be loaded as well.

New ``enabled`` rule parameter used to create rules disabled by default (#809)
------------------------------------------------------------------------------

Previously, all defined rules were enabled by default and could be disabled using ``--exclude`` option (or by
using ``--include`` if not listed with the option). It is now possible to create a rule disabled by default using
new parameter, ``enabled``::

    rules = {
        "1155": Rule(
            rule_id="1155",
            name="custom-rule",
            msg="Custom rule message",
            severity=RuleSeverity.INFO,
            enabled=False,
            docs="""
            Custom rule description.
            """,
        )
    }

Such rules can be enabled when called explicitly with ``--include`` option::

    robocop --include custom-rule .

 or by configuring ``enabled`` parameter directly::

    robocop --ext-rules custom_rules.py -c custom-rule:enabled:True .

Reports refactor (#834)
-----------------------

Our internal reports structure was refactored to make it easier to maintain and develop it in the future. Now,
each report is stored in a separate file in Robocop project. From the user's perspective, reports should work
the same as before.

Rule severity thresholds printed value (#791)
-----------------------------------------------

Rule severity threshold allows to change rule severity depending on the threshold value and configured severities.
In fact, it was confusing to see the reports for the same rule with different severities but the same limit value.
We changed this behaviour to log the actual value that met the severity threshold.

As for example, you can configure ``too-many-calls-in-test-case`` to report warning on 10 keywords and error on 30
keywords. With such configuration you will get following reports::

    test.robot:33:1 [W] 0505 Test case 'Test case 1' has too many keywords inside (24/10) (too-many-calls-in-test-case)
    test.robot:62:1 [E] 0505 Test case 'Test case 2' has too many keywords inside (30/30) (too-many-calls-in-test-case)

Not configured severity threshold should be ignored (#791)
----------------------------------------------------------

Previously, if the rule severity threshold was configured but the rule value didn't met any conditions it was reported
with default severity. Now if the value don't pass any configured severity threshold, the issue is ignored.

For example, let's assume that ``line-too-long`` (with default severity ``W``) is configured to have severity ``E`` when
the number of the lines is higher than 150::

    robocop -c line-too-long:severity_threshold:error=150

With above configuration, ``line-too-long`` will only be reported if number of the lines is higher than 150.
The rule will display the WARNING message only if it is explicitly configured::

    robocop -c line-too-long:severity_threshold:warning=120:error=150

which is how it used to work before this release - the thresholds were added to the default ones, and now they are overwritten.

.. note::
    If your configuration contains any changes to the rule severity threshold, make sure to update it after bumping the
    Robocop version to 3.3.0+, otherwise it may provide results other than expected.

Improved documentation (#882)
-----------------------------

Our documentation has improved with better formatting of the rules.
They now have a better structure and feature a syntax highlighting for all examples.
There's also a copy button now next to the code snippets.

We plan to improve the examples with the ones that are inspired by the real-world examples soon.

Acknowledgements
================

Thanks to...
